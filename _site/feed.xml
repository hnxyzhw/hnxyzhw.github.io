<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Allen Woody</title>
    <description>嗨，我是朱洪伍 (@hnxyzhw)，一名来自中国的 iOS 开发者。现居北京，就职于小灵通电子支付有限公司。正在get新技能，探求创意之源。</description>
    <link>https://hnxyzhw.github.io/</link>
    <atom:link href="https://hnxyzhw.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 17 Feb 2017 15:31:23 +0800</pubDate>
    <lastBuildDate>Fri, 17 Feb 2017 15:31:23 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>app审核中遇到的问题03（涉及到金融类的需要用企业级别的账号申请上架）</title>
        <description>&lt;p&gt;2017年2月17日 上午2:54
发件人 Apple
	•	2. 3 PERFORMANCE: ACCURATE METADATA 
	•	0. 10.0 BEFORE YOU SUBMIT: PROGRAM LICENSE AGREEMENT&lt;/p&gt;

&lt;p&gt;Performance - 2.3.7&lt;/p&gt;

&lt;p&gt;Your app name to be displayed on the App Store includes keywords or descriptors, which are not appropriate for use in an app name.&lt;/p&gt;

&lt;p&gt;Specifically, the following words in your app name are considered keywords or descriptors:&lt;/p&gt;

&lt;p&gt;贷款、借款、网银管理、顾问&lt;/p&gt;

&lt;p&gt;Next Steps&lt;/p&gt;

&lt;p&gt;Please revise your app name to remove any keywords and descriptors from all localizations of your app. Keywords can be entered in the Keywords field in iTunes Connect to be used as search terms for your app.&lt;/p&gt;

&lt;p&gt;Please also remember to re-evaluate your app name title to ensure it’s 50 characters or less.&lt;/p&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;For information on how to revise your app name, please see &lt;a href=&quot;http://help.apple.com/xcode/mac/8.2/#/dev3db3afe4f&quot;&gt;Renaming a Project or App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For information on changing the app name and other metadata in iTunes Connect, please see the section “Viewing and Changing Your App’s Metadata” in the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html&quot;&gt;iTunes Connect Developer Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PLA 1.2&lt;/p&gt;

&lt;p&gt;The Seller and Artist names associated with your app do not reflect the name of the financial institution(s) or loan provider(s) in the app or its metadata, as required by section 1.2 of the Apple Developer Program License Agreement. Next Steps Your app must be published under a Seller name and Artist name that reflects the financial institution(s) or loan provider(s)  brand. If you have developed these apps on behalf of a client, please advise your client to add you to the development team of their Apple Developer account. The Artist name is the Company name in iTunes Connect. For information on how to address this issue, please contact iTunes Connect Contact Us.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a1618.phobos.apple.com/us/r30/Purple122/v4/dc/47/f6/dc47f682-00aa-ffab-0704-a96e5f502d4b/attachment-9184204356495002063Screenshot-0216-105342.png?downloadKey3=1487497979_3be2cc0863c88f61c5474dca0321a00f&quot;&gt;Screenshot-0216-105342.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a1078.phobos.apple.com/us/r30/Purple111/v4/7f/ee/fe/7feefe09-beae-c63f-94d4-fd0761f860e9/attachment-4518752275153205965Screenshot-0216-105204.png?downloadKey3=1487497979_d6c48e5627a5cecaaceb7086b2b30da9&quot;&gt;Screenshot-0216-105204.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a1664.phobos.apple.com/us/r30/Purple111/v4/b3/4e/eb/b34eeb4a-a328-3419-470e-714ee4ccff95/attachment-463550308834771403Screenshot-0216-105314.png?downloadKey3=1487497979_daaef5524cb609e8e7c677ffce2a06fc&quot;&gt;Screenshot-0216-105314.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a858.phobos.apple.com/us/r30/Purple122/v4/d7/7d/a8/d77da821-018b-f6c0-2d15-949ea0f9a487/attachment-930135373867405000Screenshot-0216-105322.png?downloadKey3=1487497979_c7af3fe3f3109959b366dea8b120e9b0&quot;&gt;Screenshot-0216-105322.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a1.phobos.apple.com/us/r30/Purple111/v4/b7/fd/58/b7fd5806-3ef0-1fc0-a3e0-66d17256efb6/attachment-3598297107114342811Screenshot-0216-105337.png?downloadKey3=1487497979_0577e0c8103248c11880e6bdb1f0ccb7&quot;&gt;Screenshot-0216-105337.png &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;//百度翻译&lt;/p&gt;

&lt;p&gt;Performance - 2.3.7&lt;/p&gt;

&lt;p&gt;应用程序商店上要显示的应用程序名称包括关键字或描述符，不适合在应用程序名称中使用。&lt;/p&gt;

&lt;p&gt;具体来说，在你的应用程序名称下面的单词被认为是关键字或描述符：&lt;/p&gt;

&lt;p&gt;贷款、借款、网银管理、顾问&lt;/p&gt;

&lt;p&gt;接下来的步骤&lt;/p&gt;

&lt;p&gt;请修改您的应用程序的名称从所有局限你的应用程序中删除任何关键词和描述。关键词可输入关键字字段在iTunes Connect作为你的应用程序的搜索条件。&lt;/p&gt;

&lt;p&gt;请记住重新评估您的应用程序名称的标题，以确保它的50个字符或更少。&lt;/p&gt;

&lt;p&gt;资源&lt;/p&gt;

&lt;p&gt;有关如何修改您的应用程序的名称，请参阅重命名项目或应用程序。&lt;/p&gt;

&lt;p&gt;为改变在iTunes应用程序名称和其他元数据连接的信息，请参见“查看和更改您的应用程序的元数据在iTunes Connect开发者指南。&lt;/p&gt;

&lt;p&gt;PLA 1.2&lt;/p&gt;

&lt;p&gt;与您的应用程序相关联的卖方和艺术家名称不反映在应用程序或其元数据的金融机构或贷款提供商的名称，如由苹果开发者计划许可协议第1.2节所要求的。下一步您的应用程序必须在卖方名称和艺术家的名字，反映了金融机构（或）贷款提供商。如果您已经开发了这些应用程序代表一个客户，请告知您的客户添加您的开发团队，他们的苹果开发者帐户。艺术家的名字是公司的名字在iTunes Connect。关于如何解决这个问题，请联系iTunes Connect联系我们。&lt;/p&gt;

&lt;p&gt;个人理解：
第一个问题是关键字的问题，app的名字后边不能追加太多关键字跟描述。删除掉对应的关键字就可以了。
第二个问题是说app属于金融类的应用，app里面没有反应出开发者的名字和贷款公司名字有关联或者关系。
并且金融类的应用，只能使用公司账号发布。&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Feb 2017 13:56:00 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2017/02/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9803(%E6%B6%89%E5%8F%8A%E5%88%B0%E9%87%91%E8%9E%8D%E7%B1%BB%E7%9A%84%E9%9C%80%E8%A6%81%E7%94%A8%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%E4%B8%8A%E6%9E%B6)/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2017/02/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9803(%E6%B6%89%E5%8F%8A%E5%88%B0%E9%87%91%E8%9E%8D%E7%B1%BB%E7%9A%84%E9%9C%80%E8%A6%81%E7%94%A8%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%E4%B8%8A%E6%9E%B6)/</guid>
        
        <category>iOS,AppleStore</category>
        
        
      </item>
    
      <item>
        <title>适配iOS状态栏颜色</title>
        <description>&lt;p&gt;Xcode 升级后，旧的状态栏的样式设置方式会引起警告错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Error&amp;gt;: CGContextSaveGState: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable
&amp;lt;Error&amp;gt;: CGContextRestoreGState: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;具体原因：设置 app 的状态栏样式的使用了旧的方法。
之前需要兼容iOS7，iOS8。会在 info.plist 里面的 View controller-based status bar appearance （默认会为 YES）设置为NO，如果不设置的话默认也是YES。&lt;/p&gt;

&lt;p&gt;可以调用该方法来改变状态栏目的颜色：
&lt;code class=&quot;highlighter-rouge&quot;&gt;[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是到了iOS9就会报错警告，虽然不影响程序运行，但作为强迫症的程序猿，这个警告的存在不能忍啊。为了兼容iOS9，需要做以下修改：
将info.plist 里面的 View controller-based status bar appearance 删除（默认为 YES），或设置为YES。同时需要使用新的方法来设置状态栏目的颜色：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (UIStatusBarStyle)preferredStatusBarStyle;
- (UIViewController *)childViewControllerForStatusBarStyle;
- (void)setNeedsStatusBarAppearanceUpdate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;1：如果我们的rootViewController是ViewController那么只需要在VC中实现以下方法(clean 下或者删除应用程序重新运行)：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//设置状态栏的白色
 -(UIStatusBarStyle)preferredStatusBarStyle
{
    return UIStatusBarStyleLightContent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2：如果我们的rootViewController是navigationController，按照上边的方法设置你会发现是无法解决问题的。
我们必须设置 rootViewController，编译器才会去 rootViewController 中重载 preferredStatusBarStyle 方法。此时我们的 rootViewController是当前的navigationController
在appdelegate里面我们对rootViewController做一下设置：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.window.rootViewController = self.navigationController;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在对应的VC里我们需要做以下设置：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.navigationController.navigationBar.barStyle = UIBarStyleBlack;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对于navigationController状态栏颜色的修改，我们也可以重新写一个navigationController的分类来实现preferredStatusBarStyle方法的调用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//.h文件
//  UINavigationController+StatusBarStyle.h
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UINavigationController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// .m文件
//  UINavigationController+StatusBarStyle.m
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;UINavigationController+StatusBarStyle.h&quot;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UINavigationController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIStatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredStatusBarStyle&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//also you may add any fancy condition-based code here
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIStatusBarStyleLightContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;通过这个分类就可以自定义我们的状态栏的颜色了。&lt;/p&gt;

&lt;p&gt;3：还有就是在初始化登录注册界面时，一些button的背景图没有使用切图。通过颜色值来绘制一张纯色的背景图片。在编译运行时出现一下错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Error&amp;gt;: CGContextSetStrokeColorWithColor: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.
&amp;lt;Error&amp;gt;: CGContextSetFillColorWithColor: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;具体绘图的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - uicolor - uiimage
- (UIImage*) createImageWithColor:(UIColor*) color rect:(CGRect)rect{
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return theImage;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;根据返回的错误问题，可以认为是在初始化的时候有问题。检索了一下类似的问题，得到如下回复：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**若使用uikit绘图，只能在drawRect：方法中获取相应的contextRef并绘图。如果在其他方法中获取将获取到一个invalidate 的ref并且不能用于画图。
使用UiKit，你只能在当前上下文中绘图，所以如果你当前处于UIGraphicsBeginImageContextWithOptions函数或drawRect：方法中，你就可以直接使用UIKit提供的方法进行绘图。
如果你持有一个context：参数，那么使用UIKit提供的方法之前，必须将该上下文参数转化为当前上下文。
幸运的是，调用UIGraphicsPushContext 函数可以方便的将context：参数转化为当前上下文，记住最后别忘了调用UIGraphicsPopContext函数恢复上下文环境。**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**使用Core Graphics之前需要指定一个用于绘图的图形上下文（CGContextRef），这个图形上下文会在每个绘图函数中都会被用到。
如果你持有一个图形上下文context：参数，那么你等同于有了一个图形上下文，这个上下文也许就是你需要用来绘图的那个。
如果你当前处于UIGraphicsBeginImageContextWithOptions函数或drawRect：方法中，并没有引用一个上下文。为了使用Core Graphics，你可以调用UIGraphicsGetCurrentContext函数获得当前的图形上下文。**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后在登陆注册界面，按键的背景色使用了切图。其他地方按键的背景色使用了绘制的方法，统一主题色调，方便修改。&lt;/p&gt;

</description>
        <pubDate>Mon, 28 Nov 2016 09:32:38 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/11/%E9%80%82%E9%85%8DiOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/11/%E9%80%82%E9%85%8DiOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2/</guid>
        
        
      </item>
    
      <item>
        <title>app审核中遇到的问题02（应用内虚拟金币购买应用内商品被拒）</title>
        <description>&lt;p&gt;2016年11月24日 上午11:50
发件人 Apple
	•	3. 1.1 BUSINESS: PAYMENTS - IN-APP PURCHASE 
Business - 3.1.1&lt;/p&gt;

&lt;p&gt;We noticed that your app enables the purchase of content, services, or functionality in the app by means other than the In-App Purchase API, which is not allowed on the App Store.&lt;/p&gt;

&lt;p&gt;Next Steps&lt;/p&gt;

&lt;p&gt;While the payment system that you have included may conduct the transaction outside of the app, if the purchasable content, functionality, or services are intended to be used in the app, they must be purchased through IAP, within the app - unless it is of the type referenced in Guideline 3.1.3.&lt;/p&gt;

&lt;p&gt;In-App Purchase&lt;/p&gt;

&lt;p&gt;It may be appropriate to revise your app to use the In-App Purchase API to provide content purchasing functionality.&lt;/p&gt;

&lt;p&gt;In-App Purchase provides several benefits, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The flexibility to support a variety of business models.&lt;/li&gt;
  &lt;li&gt;Impacting your app ranking by consolidating your sales to one app rather than distributing them across multiple apps.&lt;/li&gt;
  &lt;li&gt;An effective marketing vehicle to drive additional sales of new content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For information on In-App Purchase, please refer to the following documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/in-app-purchase/&quot;&gt;In-App Purchase for Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html&quot;&gt;In-App Purchase Programming Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For step-by-step instructions on In-App Purchase creation within iTunes Connect, refer to &lt;a href=&quot;https://developer.apple.com/in-app-purchase/&quot;&gt;In-App Purchase for Developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://a1813.phobos.apple.com/us/r30/Purple71/v4/e9/a1/09/e9a1095f-bff6-23fc-af75-4c8be7b4885f/attachment-8754101452909378077Screenshot_1123_194831.png?downloadKey3=1484756730_08a42874f2c5dc2c42e9435761bd7bfa&quot;&gt;Screenshot 1123 194831.png&lt;/a&gt; 
&lt;a href=&quot;http://a1882.phobos.apple.com/us/r30/Purple71/v4/df/25/8a/df258a1e-a374-0ff2-2683-8c59fd1dfb7d/attachment-5903931363629314691Screenshot_1123_194844.png?downloadKey3=1484756730_3b147b756adf287544f2fc95e4c287d6&quot;&gt;Screenshot 1123 194844.png&lt;/a&gt; 
&lt;a href=&quot;http://a1255.phobos.apple.com/us/r30/Purple71/v4/79/08/a4/7908a467-56c5-e8bc-e12f-f1d435f022f1/attachment-773458648075770258Screenshot_1123_194819.png?downloadKey3=1484756730_1fbbf8998892d11b2026410e411f88ea&quot;&gt;Screenshot 1123 194819.png&lt;/a&gt; 
&lt;a href=&quot;http://a873.phobos.apple.com/us/r30/Purple71/v4/6d/03/16/6d031677-eb84-958b-bb3f-ad0e9efdc6ab/attachment-2204651524833162591Screenshot_1123_194837.png?downloadKey3=1484756730_1aa8c991be6c97e3305001247bec278d&quot;&gt;Screenshot 1123 194837.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;个人理解：
对用应用内有虚拟货币交易类型的app，是必须要走苹果内购进行充值，支付的。不然的话是不给审核通过的。（提醒：对于那些想通过后台开关控制交易充值的显示的，如果被审查到会被下架，严重的可能账号都被封掉）&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 10:50:00 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/11/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9802(%E5%BA%94%E7%94%A8%E5%86%85%E8%99%9A%E6%8B%9F%E9%87%91%E5%B8%81%E8%B4%AD%E4%B9%B0%E5%BA%94%E7%94%A8%E5%86%85%E5%95%86%E5%93%81%E8%A2%AB%E6%8B%92)/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/11/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9802(%E5%BA%94%E7%94%A8%E5%86%85%E8%99%9A%E6%8B%9F%E9%87%91%E5%B8%81%E8%B4%AD%E4%B9%B0%E5%BA%94%E7%94%A8%E5%86%85%E5%95%86%E5%93%81%E8%A2%AB%E6%8B%92)/</guid>
        
        <category>iOS,AppleStore</category>
        
        
      </item>
    
      <item>
        <title>app审核中遇到的问题01（关键字被拒）</title>
        <description>&lt;p&gt;2016年11月24日 上午8:07
发件人 Apple&lt;/p&gt;

&lt;p&gt;2.3 PERFORMANCE: ACCURATE METADATA&lt;/p&gt;

&lt;p&gt;Performance - 2.3.7&lt;/p&gt;

&lt;p&gt;Your app name to be displayed on the App Store includes keywords or descriptors, which are not appropriate for use in an app name.&lt;/p&gt;

&lt;p&gt;Specifically, the following words in your app name are considered keywords or descriptors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“信贷经理的贷款、办信用卡、公积金、花呗、学生贷抢单神器”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next Steps&lt;/p&gt;

&lt;p&gt;Please revise your app name to remove any keywords and descriptors from all localizations of your app. Keywords can be entered in the Keywords field in iTunes Connect to be used as search terms for your app.&lt;/p&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;For information on how to revise your app name, please see &lt;a href=&quot;http://help.apple.com/xcode/mac/8.2/#/dev3db3afe4f&quot;&gt;Renaming a Project or App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For information on changing the app name and other metadata in iTunes Connect, please see the section “Viewing and Changing Your App’s Metadata” in the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html&quot;&gt;iTunes Connect Developer Guide&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 07:07:00 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/11/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9801(%E5%85%B3%E9%94%AE%E5%AD%97%E8%A2%AB%E6%8B%92)/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/11/app%E5%AE%A1%E6%A0%B8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%9801(%E5%85%B3%E9%94%AE%E5%AD%97%E8%A2%AB%E6%8B%92)/</guid>
        
        <category>iOS,AppleStore</category>
        
        
      </item>
    
      <item>
        <title>iOS自定义debug模式下的NSLog宏输出</title>
        <description>&lt;p&gt;在debug模式下的时候需要把所在的类名、方法名、行数等相关信息也打印出来，这样在开发的时候就可以快速定位调试的位置，以及当前的调试信息。对于解决bug来说，这是一个非常有效率的方法。
同时在发布模式下，我们可以不输出打印这些数据，不会造成冗余数据的产生。&lt;/p&gt;

&lt;p&gt;先介绍一些参数：
（1) &lt;code class=&quot;highlighter-rouge&quot;&gt;__VA_ARGS__&lt;/code&gt;是一个可变参数的宏，很少人知道这个宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支持（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的”,”去掉的作用,否则会编译出错, 你可以试试。
（2)&lt;code class=&quot;highlighter-rouge&quot;&gt; __FILE__&lt;/code&gt;宏在预编译时会替换成当前的源文件名。
（3)&lt;code class=&quot;highlighter-rouge&quot;&gt;__LINE__&lt;/code&gt;宏在预编译时会替换成当前的行号。
（4)&lt;code class=&quot;highlighter-rouge&quot;&gt; __FUNCTION__&lt;/code&gt;宏在预编译时会替换成当前的函数名称。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最简单的一个例子：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#ifdef DEBUG
  #define MYLog(fmt, ...) NSLog((fmt), ##__VA_ARGS__);
  #else
  #define MYLog(...);
  #endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;输出当前方法名&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define MYMethod(...) NSLog(@&quot;%s&quot;, __func__);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;整理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#ifdef DEBUG
  #define DLog(fmt, ...) NSLog((@&quot;[文件名:%s]\n&quot; &quot;[函数名:%s]\n&quot; &quot;[行号:%d] \n&quot; fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);
  #define DeBugLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
  #define NSLog(...) NSLog(__VA_ARGS__);
  #define MyNSLog(FORMAT, ...) fprintf(stderr,&quot;[%s]:[line %d行] %s\n&quot;,[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String], __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);
  #else
  #define DLog(...)
  #define DeBugLog(...)
  #define NSLog(...)
  #define MyNSLog(FORMAT, ...) nil
  #endif

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 18 Nov 2016 08:52:35 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/11/iOS%E8%87%AA%E5%AE%9A%E4%B9%89debug%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84NSLog%E5%AE%8F%E8%BE%93%E5%87%BA/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/11/iOS%E8%87%AA%E5%AE%9A%E4%B9%89debug%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84NSLog%E5%AE%8F%E8%BE%93%E5%87%BA/</guid>
        
        
      </item>
    
      <item>
        <title>title和leftBarButtonItem不显示</title>
        <description>&lt;p&gt;之前自定义了navigationBar的背景颜色，升级到iOS10后，发现title,跟leftBarButtonItem不显示。
iOS9 之前的navigationBar的背景是_UINavigationBarBackground，到iOS变成了_UIBarBackground，可以通过xcode查看一下相应的布局。我的解决办法是，分别判断iOS10，iOS9的版本，找到对应的背景图，将起隐藏掉，可以消除分割线。然后重新创建一个视图层，颜色可以自定义，需要注意在添加视图或者更新视图时要放到主线程里，同时这个方法需要在viewWillAppear里调用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define isIOS9 ([[UIDevice currentDevice].systemVersion intValue]&amp;gt;=9?YES:NO)
#define isIOS10 ([[UIDevice currentDevice].systemVersion intValue]&amp;gt;=10?YES:NO)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - 动态修改状态栏跟顶部导航栏的颜色
-(void)changeNavigationBarBackgroundColor:(UIColor *)barBackgroundColor{
    if ([self.navigationController.navigationBar respondsToSelector:@selector(setBackgroundImage:forBarMetrics:)]){
        NSArray *subviews =self.navigationController.navigationBar.subviews;
        for (id viewObj in subviews) {
            if (isIOS10) {
                //iOS10,改变了状态栏的类为_UIBarBackground
                NSString *classStr = [NSString stringWithUTF8String:object_getClassName(viewObj)];
                if ([classStr isEqualToString:@&quot;_UIBarBackground&quot;]) {
                    UIImageView *imageView=(UIImageView *)viewObj;
                    imageView.hidden=YES;
                }
            }else{
                //iOS9以及iOS9之前使用的是_UINavigationBarBackground
                NSString *classStr = [NSString stringWithUTF8String:object_getClassName(viewObj)];
                if ([classStr isEqualToString:@&quot;_UINavigationBarBackground&quot;]) {
                    UIImageView *imageView=(UIImageView *)viewObj;
                    imageView.hidden=YES;
                }
            }
        }
        UIImageView *imageView = [self.navigationController.navigationBar viewWithTag:111];
        if (!imageView) {
            imageView=[[UIImageView alloc] initWithFrame:CGRectMake(0, -20, self.view.width, 64)];
            imageView.tag = 111;
            [imageView setBackgroundColor:barBackgroundColor];
            dispatch_async(dispatch_get_main_queue(), ^{
                [self.navigationController.navigationBar insertSubview:imageView atIndex:0];
            });
        }else{
            [imageView setBackgroundColor:barBackgroundColor];
            dispatch_async(dispatch_get_main_queue(), ^{
                [self.navigationController.navigationBar sendSubviewToBack:imageView];
            });
            
        }
        
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 19 Sep 2016 18:41:07 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/09/iOS10-title%E5%92%8CleftBarButtonItem%E4%B8%8D%E6%98%BE%E7%A4%BA/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/09/iOS10-title%E5%92%8CleftBarButtonItem%E4%B8%8D%E6%98%BE%E7%A4%BA/</guid>
        
        
      </item>
    
      <item>
        <title>iOS中NSString的strong、copy的使用</title>
        <description>&lt;p&gt;       iOS开发中关于内存的管理有两种，一种是基于ARC(Automatic Reference Counting)环境下的，另一种是MRC(Mannul Reference Counting)。这两种模式可以在工程中的Build Settings选项下设置，可参照下图所示：
&lt;strong&gt;**
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-f796e399a5cc4ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARC/MRC.png&quot; /&gt;
       说明：设置为Yes是ARC环境下，设置为NO是MRC环境下。
**&lt;/strong&gt;
       进入正题，我们在声明一个NSString类型的属性时，会遇到这样的一个问题。就是应该使用strong呢？还是应该用copy呢？下面我们通过具体的代码来分析一下两者的区别跟用法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作：&lt;/strong&gt;
       首先我们先声明两个不同的字符串属性，用来做比对，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theStrongStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//strong 字符串
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theCopyStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//copy 字符串
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;       theStrongStr的内存特性是strong，theCopyStr的内存特性是copy，以便我们区分。
&lt;em&gt;**&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;       创建下面两个方法testString，testMutabelString：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)testString{
    NSLog(@&quot;-------------NString--------------&quot;);
    //创建一个不可变源字符串
    NSString *originStr = @&quot;iOS&quot;;
    //初始化strong字符串
    self.theStrongStr = originStr;
    //初始化copy字符串
    self.theCopyStr = originStr;
    
    //打印字符串指向的地址,已经对应的内存地址
    NSLog(@&quot;the origin string:%p, %p&quot;,originStr,&amp;amp;originStr);
    
    NSLog(@&quot;the strong string:%p, %p&quot;,_theStrongStr,&amp;amp;_theStrongStr);
    
    NSLog(@&quot;the copy string:%p, %p&quot;,_theCopyStr,&amp;amp;_theCopyStr);
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)testMutabelString{
    NSLog(@&quot;-------------NSMutableString--------------&quot;);
    //创建一个可变源字符串
    NSMutableString *originStr = [NSMutableString stringWithFormat:@&quot;iOS&quot;];
    //初始化strong字符串
    self.theStrongStr = originStr;
    //初始化copy字符串
    self.theCopyStr = originStr;
    
    //打印字符串指向的地址,已经对应的内存地址
    NSLog(@&quot;the origin string:%p, %p&quot;,originStr,&amp;amp;originStr);
    
    NSLog(@&quot;the strong string:%p, %p&quot;,_theStrongStr,&amp;amp;_theStrongStr);
    
    NSLog(@&quot;the copy string:%p, %p&quot;,_theCopyStr,&amp;amp;_theCopyStr);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;       在viewDidLoad里调用这个两个方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
    [self testString];
    [self testMutabelString];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;       运行看到输出的结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iOSCopyAndStrong[1076:1312388] -------------NString--------------
iOSCopyAndStrong[1076:1312388] the origin string:0x109eff098, 0x7fff55d00958
iOSCopyAndStrong[1076:1312388] the strong string:0x109eff098, 0x7fb0a2c55050
iOSCopyAndStrong[1076:1312388] the copy string:0x109eff098, 0x7fb0a2c55058
iOSCopyAndStrong[1076:1312388] -------------NSMutableString--------------
iOSCopyAndStrong[1076:1312388] the origin string:0x7fb0a2f79d50, 0x7fff55d00958
iOSCopyAndStrong[1076:1312388] the strong string:0x7fb0a2f79d50, 0x7fb0a2c55050
iOSCopyAndStrong[1076:1312388] the copy string:0xa00000000534f693, 0x7fb0a2c55058

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;testString：&lt;/strong&gt;
       在testString方法里我们使用的原字符串string是一个不可变的字符串。在这种情况下，我的可以看到我们创建的strong特性的对象，跟copy特性的对象,它们所指向的地址都是同一个地址&lt;code class=&quot;highlighter-rouge&quot;&gt;0x109eff098&lt;/code&gt;，也就是我们使用的不可变字符串&lt;code class=&quot;highlighter-rouge&quot;&gt;NSString *originStr = @&quot;iOS&quot;;&lt;/code&gt;它所指向的地址。我们可以开启MRC模式，打断点调试，查看当前定义这个不可变字符串originStr的引用计数，可以发现执行完操作后&lt;code class=&quot;highlighter-rouge&quot;&gt;self.theStrongStr = originStr;self.theCopyStr = originStr;&lt;/code&gt;，originStr的引用计数发生了改变1-&amp;gt;3。每次执行都使原来的字符串originStr对象的引用计数+1。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;testMutabelString：&lt;/strong&gt;
       在testMutabelString方法里面我们使用的原字符串string是一个可变的字符串&lt;code class=&quot;highlighter-rouge&quot;&gt;NSMutableString *originStr = [NSMutableString stringWithFormat:@&quot;iOS&quot;];&lt;/code&gt;。可以看到输出结果，使用strong特性的对象仍然指向原字符串originStr的地址，而使用copy特性的对象，所指向的是一个新的地址。其实就是copy特性的对象对原字符串originStr进行了深考贝，并指向了这个这个新的地址。我们开启MRC模式，打断点调试，查看到在执行操作后，originStr对象的引用计数1-&amp;gt;2，而_theCopyStr对象的引用计数为1。这也就验证copy创建了一个新对象的说法。
       在testMutabelString方法中，不管我们如何修改originStr字符串，_theStrongStr所指向的地址也是跟着originStr字符串指向的地址变动的，这也就证明了_theStrongStr的类型实际上是可变类型NSMutableString，而不是NSString。同理_theCopyStr是指向一个新创建的对象，是不可以改变的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;归纳总结：&lt;/strong&gt;
             当原字符串是NSString类型时，由于它是不可变类型的，不管是使用strong特性，还是copy特性的对象，它们所指向的地址都跟原字符串是一样的，都指向原字符串对象。也就是说当原字符串是NSString类型时，copy特性的操作，只是做了一次浅拷贝，只是增加了指针指向原字符串所指向的地址。&lt;/p&gt;

&lt;p&gt;       当原字符串是NSMutableString类型时，strong特性对象只是增加了原字符串的引用计数，但是copy特性对象则是对原字符串进行了深拷贝，创建了一个新对象，并且指向了这个新对象。此时，copy特性对象是NSString类型的不可变的,strong特性对象是NSMutableString类型的可变的。&lt;/p&gt;

&lt;p&gt;       关于在声明NSString属性时，我们是要选择strong特性，还是选择copy特性，是需要通过开发过程中的实际情况来选择的。但是我们在大多数情况下，在生命NSString属性时，都是希望其不被改变，防止数据出错。所以大多数情况下还是选择copy特性，从而来避免一些无法预估的bug。在补充一下，当原字符串是NSMutableString类型，也就是可变类型的时候，strong特性操作只是增加了原字符串的引用计数，而copy特性操作则是进行深拷贝，所以在copy会耗费更多的内存资源跟性能。而对NSString类型不可变的，就不会有这种问题，但是基于现在这么强大的手机处理器性能，这些应该也不是什么大问题。&lt;/p&gt;

</description>
        <pubDate>Tue, 30 Aug 2016 15:15:34 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/08/iOS%E4%B8%ADNSString%E7%9A%84strong-copy%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/08/iOS%E4%B8%ADNSString%E7%9A%84strong-copy%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        
        
      </item>
    
      <item>
        <title>简单排序算法(OC实现)</title>
        <description>&lt;p&gt;排序的目的，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。我们子啊开发过程，从后台拿到的数据有可能是无序列，这就要我们运用一些排序算法，对这些数据进行二次排序。
&lt;strong&gt;**
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-45e7bbfe2ca31998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;截图1.png&quot; /&gt;
**&lt;/strong&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-7441b514575a3484.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;截图2.png&quot; /&gt;
&lt;strong&gt;**
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-c9e99cffcee7cd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;截图3.png&quot; /&gt;
**&lt;/strong&gt;
下面就介绍三种简单排序：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//属性
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectSortBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//选择排序
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertSortBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//插入排序
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellSortBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//希尔排序
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//排序过程
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITextView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodDesTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//算法简单描述
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//用于保存运算次数
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//计算次数
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;1：选择排序算法
选择排序算法就是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。这种算法不会因为数据源是否是有序数组而改变排序计算次数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
- (IBAction)selectSort:(UIButton *)sender {
    //排序算法思路
     _count = 0;
    [_calculateCount setTitle:@&quot;交换次数&quot; forState:UIControlStateNormal];
    self.resultTextView.text = @&quot;排序结果:&quot;;
    self.methodDesTextView.text = @&quot;算法简介:\n关键点是拿到当前数组的最小的元素跟剩下的元素依次比较\n拿到首个元素，将这个元素的值作为首次遍历时的数组元素的最小值，它的下标记作最小元素的下标\n然后开始从0遍历整个数组，这个最小值跟数组里面的所有值进行比较\n如果在遍历过程中有数组元素的值有比当前记录的最小值,那么就需要变更之前记录的最小值，以及最小值元素的下标\n然后讲当前遍历的首个元素跟记录的最小元素，交换一下位置，如此反复就可以达到排序的效果\n特点：不会因是否有序数组而改变排序计算次数&quot;;
    NSArray *array = @[@(13),@(5),@(9),@(12),@(10),@(4),@(1),@(7)];//无序
//    NSArray *array =@[@(1),@(5),@(9),@(12),@(10),@(4),@(7),@(13)];//部分有序
    array = [self selectSort:[array mutableCopy] withStartIndex:0];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(NSMutableArray *)selectSort:(NSMutableArray *)array withStartIndex:(int)start{
    if (start == array.count) {
        return array;
    }
    int minVale = [array[start] intValue];
    int minIndex = start;
    for (int index = start; index &amp;lt; array.count; index++) {
        if (minVale &amp;gt; [array[index] intValue]) {
            minVale = [array[index] intValue];
            minIndex = index;
            _count ++;
        }
    }
    [array exchangeObjectAtIndex:start withObjectAtIndex:minIndex];
    self.resultTextView.text = [self.resultTextView.text stringByAppendingString:[NSString stringWithFormat:@&quot;\nstart:%d--end:%ld--count:%.f:%@&quot;,start,array.count,_count,array]];
    array = [self selectSort:array withStartIndex:start + 1];
    return array;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2：插入排序算法
插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。
对于有序数组或部分有序数组，此排序方法是十分高效的。若果最小的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (IBAction)insertSort:(UIButton *)sender {
     _count = 0;
    [_calculateCount setTitle:@&quot;交换次数&quot; forState:UIControlStateNormal];
    self.resultTextView.text = @&quot;排序结果:&quot;;
    self.methodDesTextView.text = @&quot;算法简介:\n始终定义第一个元素为有序的，将元素逐个插入到有序排列之中\n其特点是要不断的移动数据，空出一个适当的位置，把待插入的元素放到里面去\n特点：对于有序数组或部分有序数组，此排序方法是十分高效的\n若果最小的元素都在最后部分的位置，那么该排序方法就会变得非常费劲了&quot;;
    NSArray *array =@[@(13),@(5),@(9),@(12),@(10),@(4),@(1),@(7)];//无序
//    NSArray *array =@[@(1),@(5),@(9),@(12),@(10),@(4),@(7),@(13)];//部分有序
    array = [self insertSortArray:[array mutableCopy]];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(NSMutableArray *)insertSortArray:(NSMutableArray *)array{
    for (int i = 1; i &amp;lt; array.count; i ++) {
        int temp = [array[i] intValue];
        int j = i;
        for (; j &amp;gt; 0 &amp;amp;&amp;amp; temp &amp;lt; [array[j -1] intValue]; j --) {
            array[j] =  array[j - 1];
            _count ++;
            
        }
        array[j] = @(temp);
        self.resultTextView.text = [self.resultTextView.text stringByAppendingString:[NSString stringWithFormat:@&quot;\nstart-%d--count:%.f:%@&quot;,i,_count,array]];  
    }
    return array;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3：希尔排序算法
希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。
希尔排序是直接插入排序算法的一种更高效的改进版本，性能上比选择排序和插入排序快得多,中等大小规模表现良好，对规模非常大的数据排序不是最优选择。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (IBAction)shellSort:(UIButton *)sender {
    _count = 0;
    [_calculateCount setTitle:@&quot;交换次数&quot; forState:UIControlStateNormal];
    self.resultTextView.text = @&quot;排序结果:&quot;;
    self.methodDesTextView.text = @&quot;算法简介:\n希尔排序是直接插入排序算法的一种更高效的改进版本\n使数组中任意间隔为N的元素都是有序的,这样的数组为N有序数组。N有序数组可以看作是N个小的有序数组所构成的一个数组\n记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止\n特点：性能上比选择排序和插入排序快得多,中等大小规模表现良好，对规模非常大的数据排序不是最优选择&quot;;
    NSArray *array =@[@(13),@(5),@(9),@(12),@(10),@(4),@(1),@(7)];//无序
//    NSArray *array =@[@(1),@(5),@(9),@(12),@(10),@(4),@(7),@(13)];//部分有序
    [self shellSortArray:[array mutableCopy] withGapH:(int)array.count/2];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(NSMutableArray *)shellSortArray:(NSMutableArray *)array withGapH:(int)gapH {
    
    if (gapH &amp;lt; 1 ) {
       return array;
    }else{
        for (int i = gapH; i &amp;lt; (int)array.count; i++ ) {
            int temp = [array[i] intValue];
            int j = i;
            while (j &amp;gt;= gapH &amp;amp;&amp;amp; temp &amp;lt; [array[j - gapH] intValue]) {
                [self exchangeArray:array withNIndex:j andMIndex:j - gapH];
                j -= gapH;
                _count ++;
            }
            array[j] = @(temp);
            
        }
        self.resultTextView.text = [self.resultTextView.text stringByAppendingString:[NSString stringWithFormat:@&quot;\nsortgapH-%d--count:%.f:%@&quot;,gapH,_count,array]];
        gapH = gapH/2;
        [self shellSortArray:array withGapH:gapH];
    }
    
    return array;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//交换两个元素
-(void)exchangeArray:(NSMutableArray *)array withNIndex:(int)n andMIndex:(int)m{
    int temp = [array[n] intValue];
    array[n] = array[m];
    array[m] = @(temp);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本文示例demo链接：&lt;a href=&quot;https://github.com/hnxyzhw/OC_SortingAlgorithm.git&quot;&gt;OC_SortingAlgorithm&lt;/a&gt;
其实还有很多排序算法没有总结，像冒泡排序算法，快速排序算法，堆排序算法，归并排序算法，计数排序算法，桶排序算法，基数排序算法等等。以后也会花一些时间研究一下这些排序算法，给自己多充点电。&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Aug 2016 09:32:04 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/08/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95(OC%E5%AE%9E%E7%8E%B0)/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/08/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95(OC%E5%AE%9E%E7%8E%B0)/</guid>
        
        
      </item>
    
      <item>
        <title>ios8-横屏状态栏不显示解决方法</title>
        <description>&lt;p&gt;开发过程中发现ios8下横屏状态栏不显示&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-885acfc974603966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;竖屏显示状态栏.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-0f9efa98d75551ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;横屏不显示状态栏.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Tips：解决这个问题，需要我们按照以下步骤操作
1：在plist文件中将 View controller-based status bar appearance 设置为NO&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-08640aa43afb2545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;plist文件.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2：还需要application:didFinishLaunchingWithOptions:中添加以下下面代码(下面的两段代码必不可少)
&lt;em&gt;**&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/683658-483d2a7c2217e8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;代码调用.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationNone];
[[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationNone]; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 11:40:37 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/08/ios8-%E6%A8%AA%E5%B1%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/08/ios8-%E6%A8%AA%E5%B1%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
        
        
      </item>
    
      <item>
        <title>Runtime优雅的解决UIButton多次点击(重复点击)</title>
        <description>&lt;p&gt;　在实际开发中我们，点击一个button按键时，需要触发一个事件去执行。用户在正常操作情况下，单次点击时，button只会响应一次点击。但是如果用户多次点击一个button，那么就会引起这个事件被多次执行，导致一些bug的出现。
如何优雅解决的这个问题呢？今天我们来使用Runtime来解决UIButton重复点击的问题。
　首先新建一个分类category，继承于UIControl,名字自己定义。
　UIControl+ZHW.h(.h文件)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIControl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;ZHW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//添加点击事件的间隔时间
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//是否忽略点击事件,不响应点击事件
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　UIControl+ZHW.m(.m文件)在使用runtime时，需要导入相应的库（objc/runtime.h）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIControl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;ZHW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControl_acceptEventInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UIControl_acceptEventInterval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIcontrol_ignoreEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UIcontrol_ignoreEvent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc_getAssociatedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControl_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doubleValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setZhw_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;objc_setAssociatedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControl_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_ASSOCIATION_RETAIN_NONATOMIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc_getAssociatedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIcontrol_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;boolValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setZhw_ignoreEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;objc_setAssociatedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIcontrol_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_ASSOCIATION_RETAIN_NONATOMIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__zhw_sendAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;method_exchangeImplementations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__zhw_sendAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setZhw_ignoreEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;afterDelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__zhw_sendAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　在需要用到地方导入UIControl+ZHW.h头文件设置button的点击时间间隔&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_ignoreEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhw_acceptEventInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtimeAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;----run click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;------comm click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　运行demo,可以发现button多次点击的问题得到了解决。在设置button的相应点击事件的时间间隔，在这个 间隔时间内，button只会响应一次点击事件。
　附上demo：&lt;a href=&quot;https://github.com/hnxyzhw/UIButtonMutablieClick.git&quot;&gt;UIButtonMutablieClick&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 03 Aug 2016 16:22:45 +0800</pubDate>
        <link>https://hnxyzhw.github.io/2016/08/Runtime%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E5%86%B3UIButton%E5%A4%9A%E6%AC%A1%E7%82%B9%E5%87%BB(%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB)/</link>
        <guid isPermaLink="true">https://hnxyzhw.github.io/2016/08/Runtime%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E5%86%B3UIButton%E5%A4%9A%E6%AC%A1%E7%82%B9%E5%87%BB(%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB)/</guid>
        
        
      </item>
    
  </channel>
</rss>
